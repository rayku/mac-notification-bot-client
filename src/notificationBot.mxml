<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   showStatusBar="false" xmlns:notificationBot="com.rayku.notificationBot.*"
					   initialize="init()"
					   skinClass="appSkin"
					   >
	<fx:Style source="styles/global.css" />
	
	<fx:Script source="launcher.as" />
	
	<s:layout>
		<s:VerticalLayout  horizontalAlign="center" />
	</s:layout>
	
	<fx:Declarations>
		<mx:HTTPService id="statusService" method="POST" url="http://notification-bot.rayku.com/tutor/{email}/ping?token={token}" showBusyCursor="false" fault="return;"  />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.rayku.notificationBot.Logo;
			
			import flash.text.engine.ElementFormat;
			import flash.text.engine.FontDescription;
			import flash.text.engine.TextBlock;
			import flash.text.engine.TextElement;
			import flash.text.engine.TextLine;
			
			import mx.logging.Log;
			
            [Bindable]
            private var email:String;
            [Bindable]
            private var token:String;
			
			private function init():void{
				var nativeApp:NativeApplication = NativeApplication.nativeApplication;
				
				nativeApp.idleThreshold = 120;
				nativeApp.addEventListener(Event.USER_IDLE, function():void{
					statusService.send({status: 'idle'});
				});
				nativeApp.addEventListener(Event.USER_PRESENT, function():void{
					statusService.send({status: 'available'});
				});
				
				changeLogo();
				
				enableDrag();
			}
			
			private function loadPreferences():void{
				var appStorage:File = File.applicationStorageDirectory;
				appStorage = appStorage.resolvePath("preferences.txt");
				
				if (appStorage.exists && nativeApplication.startAtLogin) {
					var stream:FileStream = new FileStream();
					stream.open(appStorage, FileMode.READ);
					var contentString:String = stream.readUTFBytes(stream.bytesAvailable).toString();
					var contents:Array= contentString.split(",");
					
					var email:String = contents[0].toString();
					var password:String = contents[1].toString();
					doLogin(email, password);
				}
			}
			
			private function logged(email:String, password:String, accessToken:String, storeCredentials:Boolean):void{
                viewStack.selectedChild = main;
                this.email = email;
                this.token = accessToken;
				nativeApplication.startAtLogin = storeCredentials;
				savePreferences(email, password);
			}
			
			private function savePreferences(email:String, password:String):void{
				var appStorage:File = File.applicationStorageDirectory;
				appStorage = appStorage.resolvePath("preferences.txt");
				save(appStorage, email + ',' + password);
			}
			
			private function save(file:File, content:String):void{
				var stream:FileStream = new FileStream();
				stream.open(file, FileMode.WRITE);
				stream.writeUTFBytes(content);
				stream.close();
			}
			
			private function doLogin(email:String, password:String):void{
				loginComponent.email.text = email;
				loginComponent.password.text = password;
				loginComponent.doLogin(null);
			}
			
			public function changeLogo():void{
				if (NativeApplication.supportsSystemTrayIcon) return;  
				var appData:BitmapData = new Logo().bmp;   
				var appIcon:Bitmap = new Bitmap(appData); 
				InteractiveIcon(NativeApplication.nativeApplication.icon).bitmaps = [appIcon];	
			}

			private function enableDrag():void{
				this.addEventListener(MouseEvent.MOUSE_DOWN,function():void{
					stage.nativeWindow.startMove();
				});				
			}
			
		]]>
	</fx:Script>

	<s:HGroup width="100%" horizontalAlign="right" paddingTop="15" paddingRight="15">
		<s:Image mouseChildren="true" buttonMode="true" click="stage.nativeWindow.minimize();" source="@Embed('assets/images/black_close.png')" />	
	</s:HGroup>
	
	<s:VGroup width="100%" height="100%" paddingTop="-15" horizontalAlign="center">
		<s:Image source="@Embed('assets/images/small_logo.png')" />
		
		<mx:ViewStack id="viewStack">
			<s:NavigatorContent id="login">
				<notificationBot:login id="loginComponent" width="100%" height="100%" initialize="loadPreferences()" onLogin="{logged}" />
			</s:NavigatorContent>
			<s:NavigatorContent id="main">
				<notificationBot:notificationArea width="100%" height="100%" email="{email}"  token="{token}" />
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>

</s:WindowedApplication>
