<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:updater="http://updater.riaspace.com/"
					   showStatusBar="false" xmlns:notificationBot="com.rayku.notificationBot.*"
					   initialize="init()"
					   skinClass="appSkin"
					   >
	<fx:Style source="styles/global.css" />
	
	<fx:Script source="launcher.as" />
	
	<s:layout>
		<s:VerticalLayout  horizontalAlign="center" />
	</s:layout>
	
	<fx:Declarations>
		<mx:HTTPService id="statusService" method="POST" url="http://notification-bot.rayku.com/tutor/{email}/ping?token={token}" showBusyCursor="false" fault="return;"  />
		<updater:NativeApplicationUpdater id="updater" 
										  updateURL="http://notification-bot.rayku.com/download/update.xml"
										  updateStatus="onUpdate(event)"
										  initialized="checkUpdates(event)"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import air.update.events.UpdateEvent;
			
			import com.rayku.notificationBot.Logo;
			
			import mx.controls.Alert;
			
            [Bindable]
            private var email:String;
            [Bindable]
            private var token:String;
			
			
			private function checkUpdates(e:UpdateEvent):void{
				updater.checkNow();
			}
			
			private function onCancelUpdate():void{
				this.viewStack.selectedIndex = 0;
			}
			
			private function onUpdate(e:UpdateEvent):void{
				if (updater.currentVersion < updater.updateVersion){
					this.viewStack.selectedIndex = 2;
				}
				e.preventDefault();
			}
			
			private function downloadUpdate():void{
				updater.addEventListener(UpdateEvent.DOWNLOAD_COMPLETE, installUpdate);
				updater.downloadUpdate();
			}
			
			private function installUpdate(e:Event):void{
				updater.installUpdate();
			}
			
			private function init():void{
				var nativeApp:NativeApplication = NativeApplication.nativeApplication;
				
				nativeApp.idleThreshold = 300;
				nativeApp.addEventListener(Event.USER_IDLE, function():void{
					statusService.send({status: 'idle'});
				});
				nativeApp.addEventListener(Event.USER_PRESENT, function():void{
					statusService.send({status: 'available'});
				});
				
				changeLogo();
				enableDrag();
				changeMenu();
				updater.initialize();
			}
			
			private function loadPreferences():void{
				var appStorage:File = File.applicationStorageDirectory;
				appStorage = appStorage.resolvePath("preferences.txt");
				
				if (appStorage.exists && nativeApplication.startAtLogin) {
					var stream:FileStream = new FileStream();
					stream.open(appStorage, FileMode.READ);
					var contentString:String = stream.readUTFBytes(stream.bytesAvailable).toString();
					var contents:Array= contentString.split(",");
					
					var email:String = contents[0].toString();
					var password:String = contents[1].toString();
					doLogin(email, password);
				}
			}
			
			private function logged(email:String, password:String, accessToken:String, storeCredentials:Boolean):void{
                viewStack.selectedChild = main;
                this.email = email;
                this.token = accessToken;
				nativeApplication.startAtLogin = storeCredentials;
				savePreferences(email, password);
			}
			
			private function logOut(e:Event):void{
				var appStorage:File = resolveAppStorage();
				appStorage.deleteFileAsync();
				this.viewStack.selectedIndex = 0;
			}
			
			public function resolveAppStorage():File{
				var appStorage:File = File.applicationStorageDirectory;
				return appStorage.resolvePath("preferences.txt");
			}
			
			private function savePreferences(email:String, password:String):void{
				save(resolveAppStorage(), email + ',' + password);
			}
			
			private function save(file:File, content:String):void{
				var stream:FileStream = new FileStream();
				stream.open(file, FileMode.WRITE);
				stream.writeUTFBytes(content);
				stream.close();
			}
			
			private function doLogin(email:String, password:String):void{
				loginComponent.email.text = email;
				loginComponent.password.text = password;
				loginComponent.doLogin(null);
			}
			
			public function changeLogo():void{
				if (NativeApplication.supportsSystemTrayIcon) return;  
				var appData:BitmapData = new Logo().bmp;   
				var appIcon:Bitmap = new Bitmap(appData); 
				InteractiveIcon(NativeApplication.nativeApplication.icon).bitmaps = [appIcon];	
			}

			private function enableDrag():void{
				this.addEventListener(MouseEvent.MOUSE_DOWN,function():void{
					stage.nativeWindow.startMove();
				});				
			}
			
			private function changeMenu():void{
				var logout:NativeMenuItem = new NativeMenuItem('Logout');
				logout.addEventListener(Event.SELECT, logOut); 
				
				if (NativeApplication.supportsMenu){
					logout.keyEquivalent = "l";
					var menu:NativeMenu = nativeApplication.menu;
					var file:NativeMenuItem = menu.getItemAt(1);
					file.submenu.addItemAt(logout, 0);
					nativeApplication.menu = menu;
				}else if(NativeApplication.supportsSystemTrayIcon){
					NativeApplication.nativeApplication.icon.bitmaps = [new Logo().bmp];
					var showCommand: NativeMenuItem = new NativeMenuItem("Show");
					var iconMenu:NativeMenu = new NativeMenu();
					
					iconMenu.addItem(showCommand);
					showCommand.addEventListener(Event.SELECT, undock);
					iconMenu.addItem(logout);
					var exitCommand: NativeMenuItem = iconMenu.addItem(new NativeMenuItem("Exit"));
					exitCommand.addEventListener(Event.SELECT, function(event:Event):void{
						exit();
					});
					
					var sysTrayIcon:SystemTrayIcon = NativeApplication.nativeApplication.icon as SystemTrayIcon;
					sysTrayIcon.tooltip = "rayku";
					sysTrayIcon.addEventListener(MouseEvent.CLICK,undock);
					sysTrayIcon.menu = iconMenu;
				}
				
			}
			
			public function dock(e:Event):void{
				if(NativeApplication.supportsSystemTrayIcon){
					stage.nativeWindow.visible = false;
				}else{
					stage.nativeWindow.minimize();					
				}
			}
			
			public function undock(e:Event):void{
				stage.nativeWindow.visible = true;
			}
			
		]]>
	</fx:Script>

	<s:HGroup width="100%" horizontalAlign="right" paddingTop="15" paddingRight="15">
		<s:Image mouseChildren="true" buttonMode="true" click="dock(event);" source="@Embed('assets/images/black_close.png')" />	
	</s:HGroup>
	
	<s:VGroup width="100%" height="100%" paddingTop="-15" horizontalAlign="center">
		<notificationBot:logoBox />
		
		<mx:ViewStack id="viewStack" width="80%" height="100%">
			<s:NavigatorContent id="login">
				<notificationBot:login id="loginComponent" width="100%" height="100%" initialize="loadPreferences()" onLogin="{logged}" />
			</s:NavigatorContent>
			<s:NavigatorContent id="main">
				<notificationBot:notificationArea width="100%" height="100%" email="{email}"  token="{token}" />
			</s:NavigatorContent>
			<s:NavigatorContent id="update">
				<notificationBot:updateWindow updater="{updater}" width="100%" height="100%" onUpdate="downloadUpdate" onCancel="onCancelUpdate" />
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
</s:WindowedApplication>
